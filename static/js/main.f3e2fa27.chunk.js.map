{"version":3,"sources":["components/Header.js","config/server.js","components/NoteForm.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","toggleClass","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","NoteForm","handleChange","e","setState","target","name","value","createNote","state","body","title","database","ref","push","err","htmlFor","type","onChange","this","placeholder","id","Component","Notes","child","remove","notes","map","note","key","removeNote","App","newNote","db","listenForChange","on","snapshot","val","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAWeA,EATA,SAAAC,GAAK,OAClB,4BAAQC,UAAU,eAChB,wBAAIA,UAAU,cAAd,YACA,4BAAQA,UAAU,iBAAiBC,QAASF,EAAMG,aAChD,0BAAMF,UAAU,aAAhB,Q,gBCSSG,E,OAFFC,EAASC,cAXC,CACrBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBC+DFC,E,YArEb,WAAYf,GAAQ,IAAD,8BACjB,+CAQFgB,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAXX,EAenBC,WAAa,WACa,KAApB,EAAKC,MAAMC,MAAoC,KAArB,EAAKD,MAAME,OACvCrB,EACGsB,WACAC,IAAI,SACJC,KAAK,CAAEH,MAAO,EAAKF,MAAME,MAAOD,KAAM,EAAKD,MAAMC,OAEpD,EAAKN,SAAS,CACZO,MAAO,GACPD,KAAM,GACNK,IAAK,KAGP,EAAK7B,MAAMG,eAEX,EAAKe,SAAS,CACZW,IAAK,kDA7BT,EAAKN,MAAQ,CACXE,MAAO,GACPD,KAAM,GACNK,IAAK,IALU,E,sEAqCjB,OACE,yBAAK5B,UAAU,aACb,gEACA,yBAAKA,UAAU,mBACb,2BAAO6B,QAAQ,SAAf,cACA,2BACEV,KAAK,QACLW,KAAK,OACLC,SAAUC,KAAKjB,aACfK,MAAOY,KAAKV,MAAME,MAClBS,YAAY,sCAGhB,yBAAKjC,UAAU,mBACb,2BAAO6B,QAAQ,QAAf,WACA,8BACEK,GAAG,iBACHf,KAAK,OACLY,SAAUC,KAAKjB,aACfK,MAAOY,KAAKV,MAAMC,KAClBU,YAAY,0CAEbD,KAAKV,MAAMM,IAAM,uBAAG5B,UAAU,OAAOgC,KAAKV,MAAMM,KAAW,MAE9D,4BAAQ5B,UAAU,gBAAgBC,QAAS+B,KAAKX,YAAhD,2B,GA9Dec,aCgCRC,E,YA/Bb,WAAYrC,GAAQ,uE,wEAITmC,GACT/B,EACGsB,WACAC,IAAI,SACJW,MAAMH,GACNI,W,+BAGK,IAAD,OACP,OACE,yBAAKtC,UAAU,iBACZgC,KAAKjC,MAAMwC,MAAMC,KAAI,SAAAC,GAAI,OACxB,yBAAKC,IAAKD,EAAKP,GAAIlC,UAAU,YAC3B,yBAAKA,UAAU,cACb,4BAAKyC,EAAKjB,OACV,4BAAQvB,QAAS,kBAAM,EAAK0C,WAAWF,EAAKP,MAA5C,MAEF,yBAAKlC,UAAU,gBACb,2BAAIyC,EAAKlB,gB,GAvBHY,aCyDLS,E,2MArDbtB,MAAQ,CACNiB,MAAO,GACPM,SAAS,G,EAGX3C,YAAc,WACZ,EAAKe,SAAS,CACZ4B,SAAU,EAAKvB,MAAMuB,W,mFAKvBb,KAAKc,GAAK3C,EAAKsB,WACfO,KAAKe,oB,wCAGY,IAAD,OAChBf,KAAKc,GAAGpB,IAAI,SAASsB,GAAG,eAAe,SAAAC,GACrC,IAAIR,EAAO,CACTP,GAAIe,EAASP,IACblB,MAAOyB,EAASC,MAAM1B,MACtBD,KAAM0B,EAASC,MAAM3B,MAGnBgB,EAAQ,EAAKjB,MAAMiB,MACvBA,EAAMZ,KAAKc,GAEX,EAAKxB,SAAS,CACZsB,MAAOA,OAIXP,KAAKc,GAAGpB,IAAI,SAASsB,GAAG,iBAAiB,SAAAC,GACvC,IAAIV,EAAQ,EAAKjB,MAAMiB,MACvBA,EAAQA,EAAMY,QAAO,SAAAV,GAAI,OAAIA,EAAKP,KAAOe,EAASP,OAElD,EAAKzB,SAAS,CACZsB,MAAOA,S,+BAMX,OACE,yBAAKvC,UAAWgC,KAAKV,MAAMuB,QAAU,aAAe,OAClD,kBAAC,EAAD,CAAQ3C,YAAa8B,KAAK9B,YAAa2C,QAASb,KAAKV,MAAMuB,UAC3D,kBAAC,EAAD,CAAU3C,YAAa8B,KAAK9B,cAC5B,kBAAC,EAAD,CAAOqC,MAAOP,KAAKV,MAAMiB,a,GAhDfJ,aCMEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3e2fa27.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => (\r\n  <header className=\"note-header\">\r\n    <h3 className=\"main-title\">Notatnik</h3>\r\n    <button className=\"note-show-form\" onClick={props.toggleClass}>\r\n      <span className=\"note-plus\">+</span>\r\n    </button>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCLscC5S6pXVVJkmhOoIDcMZPMq_gmDW3c\",\r\n  authDomain: \"note-app-react-20bea.firebaseapp.com\",\r\n  databaseURL: \"https://note-app-react-20bea.firebaseio.com\",\r\n  projectId: \"note-app-react-20bea\",\r\n  storageBucket: \"note-app-react-20bea.appspot.com\",\r\n  messagingSenderId: \"869788691386\",\r\n  appId: \"1:869788691386:web:c871fa5fa66b0c750c4b83\",\r\n  measurementId: \"G-B7CTFVWV8H\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fire;\r\n","import React, { Component } from \"react\";\r\nimport fire from \"../config/server\";\r\n\r\nclass NoteForm extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      title: \"\",\r\n      body: \"\",\r\n      err: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  createNote = () => {\r\n    if (this.state.body !== \"\" && this.state.title !== \"\") {\r\n      fire\r\n        .database()\r\n        .ref(\"notes\")\r\n        .push({ title: this.state.title, body: this.state.body });\r\n\r\n      this.setState({\r\n        title: \"\",\r\n        body: \"\",\r\n        err: \"\"\r\n      });\r\n\r\n      this.props.toggleClass();\r\n    } else {\r\n      this.setState({\r\n        err: \"Wpisz tytuł oraz teść notatki\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"note-form\">\r\n        <h3>Stwórz nową notatkę</h3>\r\n        <div className=\"note-form-group\">\r\n          <label htmlFor=\"title\">Tytuł</label>\r\n          <input\r\n            name=\"title\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.title}\r\n            placeholder=\"Tytuł mojej nowej notatki..\"\r\n          />\r\n        </div>\r\n        <div className=\"note-form-group\">\r\n          <label htmlFor=\"body\">Notatka</label>\r\n          <textarea\r\n            id=\"form-note-body\"\r\n            name=\"body\"\r\n            onChange={this.handleChange}\r\n            value={this.state.body}\r\n            placeholder=\"Treść mojej nowej notatki..\"\r\n          ></textarea>\r\n          {this.state.err ? <p className=\"err\">{this.state.err}</p> : null}\r\n        </div>\r\n        <button className=\"note-form-btn\" onClick={this.createNote}>\r\n          Dodaj notatkę\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteForm;\r\n","import React, { Component } from \"react\";\r\nimport fire from \"../config/server\";\r\n\r\nclass Notes extends Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  removeNote(id) {\r\n    fire\r\n      .database()\r\n      .ref(\"notes\")\r\n      .child(id)\r\n      .remove();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"notes-wrapper\">\r\n        {this.props.notes.map(note => (\r\n          <div key={note.id} className=\"note-box\">\r\n            <div className=\"note-title\">\r\n              <h2>{note.title}</h2>\r\n              <button onClick={() => this.removeNote(note.id)}>+</button>\r\n            </div>\r\n            <div className=\"note-content\">\r\n              <p>{note.body}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Notes;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport NoteForm from \"./components/NoteForm\";\nimport Notes from \"./components/Notes\";\nimport fire from \"./config/server\";\n\nclass App extends Component {\n  state = {\n    notes: [],\n    newNote: false\n  };\n\n  toggleClass = () => {\n    this.setState({\n      newNote: !this.state.newNote\n    });\n  };\n\n  componentDidMount() {\n    this.db = fire.database();\n    this.listenForChange();\n  }\n\n  listenForChange() {\n    this.db.ref(\"notes\").on(\"child_added\", snapshot => {\n      let note = {\n        id: snapshot.key,\n        title: snapshot.val().title,\n        body: snapshot.val().body\n      };\n\n      let notes = this.state.notes;\n      notes.push(note);\n\n      this.setState({\n        notes: notes\n      });\n    });\n\n    this.db.ref(\"notes\").on(\"child_removed\", snapshot => {\n      let notes = this.state.notes;\n      notes = notes.filter(note => note.id !== snapshot.key);\n\n      this.setState({\n        notes: notes\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className={this.state.newNote ? \"App active\" : \"App\"}>\n        <Header toggleClass={this.toggleClass} newNote={this.state.newNote} />\n        <NoteForm toggleClass={this.toggleClass} />\n        <Notes notes={this.state.notes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}